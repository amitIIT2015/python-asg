from __future__ import print_function
import matplotlib.pyplot as plt
class Interpolate:
    
    def solve(self,U,V,method):
    # U=List of points where required polynomial equals given polynomial
    # V=List of coefficients of given polynomial
        if(method=="newton"):
            return (self.Newton(U,V))
        else:
            return (self.Lagrange(U,V))
    def pattern(self,cofficient):
        l=len(cofficient);
        temp=[];
        for i in range(l-1):
            temp.append(str(cofficient[l-(i+1)])+'x^'+str(l-(i+1))+str('+'))
        temp.append(str(cofficient[0])+'x^'+str(0));    
        for i in temp:
            print (i,end ='' );
        print('\n');
    def F(self,x,cofficient):
        temp=0;
        for i in range(len(cofficient)):
             temp+=cofficient[i]*(x**i)
        return temp    
        
    def plotting(self,cofficient,U,V):
        import numpy
         
        l=len(cofficient);    
        x = numpy.linspace(min(U)-1,max(U)+1, 100);
        
        y=[self.F(i,cofficient) for i in x]
        
        plt.plot(x,y,'-');
        
        for i in range(len(U)):
            s='('+str(U[i])+','+str(V[i])+')'
            plt.annotate(s,xy=(U[i],V[i]),xytext=(U[i],V[i]+0.8))
            plt.plot([U[i]],[V[i]],' ',marker='o',color='r')
        plt.annotate('Interpolation',xy=(min(U)+1,max(V)-1),xytext=(min(U)+1,max(V)-1))    
        plt.xlabel('X-AXIS');
        plt.ylabel('Y-AXIS');
        plt.show()
        
         
        

    def Lagrange(self,U,V):                                                
       
        
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(U)                                                           
        w=(-1*U[0],1)                                                      
        for i in range(1,n):
            w=P.polymul(w,(-1*U[i],1))                                    
        result=array([0.0 for i in range(len(w)-1)])                    
        derivative=P.polyder(w)                                             
        for i in range(n):
            result+=(P.polydiv(w,(-1*U[i],1))[0]*V[i])/P.polyval(U[i],derivative)


        temp=list(result);
        self.plotting(temp,U,V);
        self.pattern(temp);
                                                         
    def Newton(self,U,V):                                                   
       
        
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(U)                                                            
        Q=[[0.0 for i in range(n)] for j in range(n)]                    
        for i in range(n):                                                 
            Q[i][0]=V[i]
        for i in range(1,n):                                               
            for j in range(n-i):
                Q[j][i]=(Q[j+1][i-1]-Q[j][i-1])/(U[j+i]-U[j])
        result=array((Q[0][0],))                                          
        for i in range(1,n):
            prod=(-1*U[0],1)                                               
                                                                            
            for j in range(1,i):
                prod=P.polymul(prod,(-1*U[j],1))                              
            result=P.polyadd(result,array(prod)*Q[0][i])
        temp=list(result);
        print (temp);
        self.plotting(temp,U,V);
        self.pattern(temp);                       

# x=Interpolate()
# x.solve(Input)


