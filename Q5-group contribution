import numpy as np
import matplotlib.pyplot as plt

class integrate():
    def solve(self,a,b,n,f,method):
            #a=lower limit,b=upper limit,n=no.of parts,f=function
        if method=='trapezoid':
            l=[]
            s=0
            m=float(b-a)/float(n)
            for i in range(n+1):
                l.append(a+m*i)
            for j in range(1,n):
                s=s+f(l[j])
            t=np.arange(-10.0,10.0,0.1)
            #function f drawn b/w -10 and 10
            plt.plot(t,f(t),color='black')
            h=np.arange(a,b+m,m)
            # a&b must be b/w -10 and 10
            plt.plot(h,f(h),'r-o')
            plt.xlabel('X-AXIS')
            plt.ylabel('Y-AXIS')
            plt.title('Trapezoid Method')
            plt.fill_between(h,f(h),0,color='0.8')
            plt.show()
            return (m/2)*(f(l[0])+f(l[n])+2*s)
        elif method=='simpson':
            l=[]
            s,k=0,0
            m=float(b-a)/float(2*n)
            for i in range(2*n+1):
                l.append(a+m*i)
            for j in range(1,n+1):
                s=s+f(l[2*j-1])
            for g in range(2,n+1):
                k=k+f(l[2*g-2])
            t=np.arange(-10.0,10.0,0.1)
            plt.plot(t,f(t),color='black')
            h=np.arange(a,b+m,m)
            plt.plot(h,f(h),'g-^')
            plt.xlabel('X-AXIS')
            plt.ylabel('Y-AXIS')
            plt.title('Simpson Method')
            plt.fill_between(h,f(h),0,color='0.8')
            plt.show()
            return (m/3)*(f(l[0])+f(l[2*n])+4*s+2*k)

        


		
